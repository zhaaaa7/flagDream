{"version":3,"sources":["ScrollToTop.jsx","App.js","serviceWorker.js","index.js"],"names":["ScrollToTop","prevProps","this","props","location","pathname","window","scrollTo","children","Component","withRouter","Homepage","React","lazy","Promise","all","__webpack_require__","e","then","bind","Course1","Course2","Course3","AboutUs","NoMatch","App","react_default","a","createElement","react_router_dom","src_ScrollToTop","react","fallback","react_router","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAGMA,6LACiBC,GACXC,KAAKC,MAAMC,SAASC,WAAaJ,EAAUG,SAASC,UACpDC,OAAOC,SAAS,EAAG,oCAKvB,OAAOL,KAAKC,MAAMK,gBARAC,aAYXC,cAAWV,GCTpBW,EAAWC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aAC5BC,EAAUP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACrBE,EAAUR,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACrBG,EAAUT,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACrBI,EAAUV,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACrBK,EAAUX,eAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAyBZM,MArBf,WACE,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUC,SAAUN,EAAAC,EAAAC,cAAA,0BAElBF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWzB,IACjCe,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,OAAK,EAACC,UAAWhB,IAChDM,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,OAAK,EAACC,UAAWf,IAChDK,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,OAAK,EAACC,UAAWd,IAChDI,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWb,IAExCG,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIE,UAAWZ,SChBnBa,QACW,cAA7B/B,OAAOF,SAASkC,UAEe,UAA7BhC,OAAOF,SAASkC,UAEhBhC,OAAOF,SAASkC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.c065a16d.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { withRouter } from \"react-router\";\n\nclass ScrollToTop extends Component {\n    componentDidUpdate(prevProps) {\n        if (this.props.location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        return this.props.children;\n    }\n}\n\nexport default withRouter(ScrollToTop);","import React, { lazy, Suspense } from 'react';\nimport './App.css';\nimport { HashRouter, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ScrollToTop from './ScrollToTop';\n// import Homepage from './components/Homepage/index';\n\nconst Homepage = React.lazy(() => import('./components/Homepage/index'));\nconst Course1 = lazy(() => import('./components/Course1/index'));\nconst Course2 = lazy(() => import('./components/Course2/index'));\nconst Course3 = lazy(() => import('./components/Course3/index'));\nconst AboutUs = lazy(() => import('./components/AboutUs/index'));\nconst NoMatch = lazy(() => import('./components/NoMatch'));\n\n\n\nfunction App() {\n  return (\n    <HashRouter>\n      <ScrollToTop>\n        <Suspense fallback={<div>Loading...</div>}>\n\n          <Switch>\n            <Route path=\"/\" exact component={Homepage} />\n            <Route path=\"/courses/course1\" exact component={Course1} />\n            <Route path=\"/courses/course2\" exact component={Course2} />\n            <Route path=\"/courses/course3\" exact component={Course3} />\n            <Route path=\"/aboutus\" exact component={AboutUs} />\n\n            <Route path=\"*\" component={NoMatch} />\n          </Switch>\n        </Suspense>\n      </ScrollToTop>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}